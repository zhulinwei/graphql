// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type User struct {
	ID     *int            `json:"id"`
	Name   *string         `json:"name"`
	Email  *string         `json:"email"`
	Phone  *string         `json:"phone"`
	Status *UserStatusEnum `json:"status"`
}

type UserStatusEnum string

const (
	UserStatusEnumEnableUser  UserStatusEnum = "EnableUser"
	UserStatusEnumDisableUser UserStatusEnum = "DisableUser"
)

var AllUserStatusEnum = []UserStatusEnum{
	UserStatusEnumEnableUser,
	UserStatusEnumDisableUser,
}

func (e UserStatusEnum) IsValid() bool {
	switch e {
	case UserStatusEnumEnableUser, UserStatusEnumDisableUser:
		return true
	}
	return false
}

func (e UserStatusEnum) String() string {
	return string(e)
}

func (e *UserStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatusEnum", str)
	}
	return nil
}

func (e UserStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
